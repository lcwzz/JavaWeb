# HTTP协议
    * 概念：Hyper Text Transfer Protocol 超文本传输协议
    * 传输协议：定义了客户端和服务器端通信时，发送数据的格式
    * 特点：
        1. 基于TCP/IP的高级协议
        2. 默认端口号:80
        3. 基于请求/响应模型的:一次请求对应一次响应
        4. 无状态的：每次请求之间相互独立，不能交互数据

    * 历史版本：
        * 1.0：每一次请求响应都会建立新的连接
        * 1.1：复用连接

    * 请求消息数据格式
        1. 请求行
            请求方式 请求url 请求协议/版本

            * 请求方式：
                * HTTP协议有7中请求方式，常用的有2种:
                    * GET：
                        1. 请求参数在请求行中(url后)
                        2. 请求的url长度有限制的
                        3. 不太安全
                    * POST：
                        1. 请求参数在请求体中
                        2. 请求的url长度没有限制的
                        3. 相对安全
        2. 请求头：客户端浏览器告诉服务器一些信息
            请求头名称: 请求头值
            * 常见的请求头：
                1. User-Agent：浏览器告诉服务器浏览器版本信息
                    * 可以在服务器端获取该头的信息，解决浏览器的兼容性问题
                2. Referer：告诉服务器，当前请求从哪里来
                    * 作用：
                        1. 防盗链
                        2. 统计工作
        3. 请求空行
            空行，就是用于分割POST请求的请求头和请求体的
        4. 请求体(正文)：
            * 封装POST请求的请求参数

        * 请求消息例子：
            //请求行
            POST /login.html HTTP/1.1
            //请求头
            Host: localhost
            User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0
            Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
            Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
            Accept-Encoding: gzip, deflate
            Referer: http://localhost/login.html
            Connection: keep-alive
            Upgrade-Insecure-Requests: 1

            //请求体
            username=zhangsan


# Request：
    1. request对象和response对象的原理
        1. request和response对象是由服务器创建的
        2. request对象是来获取请求消息，response对象是来设置响应消息

    2. request对象继承体系结构：
        ServletRequest		--	接口
            |	继承
        HttpServletRequest	-- 接口
            |	实现
        org.apache.catalina.connector.RequestFacade 类

    3. request功能：
        1. 获取请求消息数据
            1. 获取请求行数据
                * GET /day14/demo1?name=zhangsan HTTP/1.1
                * 方法：
                    1. 获取请求方式 ：GET
                        * String getMethod()
                    2. (*)获取虚拟目录：/day14
                        * String getContextPath()
                    3. 获取Servlet路径: /demo1
                        * String getServletPath()
                    4. 获取get方式请求参数：name=zhangsan
                        * String getQueryString()
                    5. (*)获取请求URI：/day14/demo1
                        * String getRequestURI():		 /day14/demo1
                        * StringBuffer getRequestURL():  http://localhost/day14/demo1
                        URL:统一资源定位符
                        URI：统一资源标识符
                    6. 获取协议及版本：HTTP/1.1
                        * String getProtocol()
                    7. 获取客户机的IP地址：
                        * String getRemoteAddr()

            2. 获取请求头数据
                * 方法：
                    * (*)String getHeader(String name):通过请求头的名称获取请求头的值
                    * Enumeration<String> getHeaderNames():获取所有的请求头名称

            3. 获取请求体数据:
                * 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数
                * 步骤：
                    1. 获取流对象
                        *  BufferedReader getReader()：
                           获取字符输入流，只能操作字符数据
                        *  ServletInputStream getInputStream()：
                           获取字节输入流，可以操作所有类型数据
                    2. 再从流对象中拿数据

        2. (*)其他功能：
            1. 获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数
                1. String getParameter(String name):根据参数名称获取参数值(一对一)
                2. String[] getParameterValues(String name):根据参数名称获取参数值的数组(一对多)
                3. Enumeration<String> getParameterNames():获取所有请求的参数名称
                4. Map<String,String[]> getParameterMap():获取所有参数的map集合

                * 中文乱码问题：
                   * 解决：在获取参数前，设置request的编码request.setCharacterEncoding("utf-8");

            2. 请求转发：一种在服务器内部的资源跳转方式
                * 步骤：
                    1. 通过request对象获取请求转发器对象：
                       RequestDispatcher getRequestDispatcher(String path)
                    2. 使用RequestDispatcher对象来进行转发：
                       forward(ServletRequest request, ServletResponse response)

                * 特点：
                    1. 浏览器地址栏路径不发生变化
                    2. 只能转发到当前服务器内部资源中
                    3. 转发是一次请求

            3. 共享数据：
                * 域对象：一个有作用范围的对象，可以在范围内共享数据
                * request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据
                * 方法：
                    1. void setAttribute(String name,Object obj):存储数据
                    2. Object getAttitude(String name):通过键获取值
                    3. void removeAttribute(String name):通过键移除键值对

            4. 获取ServletContext：
                * ServletContext getServletContext()



    ## 参考：login模块
    * 需求：
        1.编写login.html登录页面(username和password 两个输入框)
        2.使用Druid数据库连接池技术,操作mysql，test数据库中user_login表
        3.查询用户信息是否正确
        4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您
        5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误

    * 开发步骤
        1. 创建html页面，配置文件，jar包
        2. 创建数据库表和添加数据
        3. 创建bean.User类
        4. 添加JDBC的相关jar包,编写工具类utils.JDBCUtils
        5. 创建BaseDAO以及UserDao,在UserDao提供login方法并测试方法
        6. 编写servlet.LoginServlet类
        7. 编写FailServlet和SuccessServlet类
        8. 填充login.html中form表单的action路径
            * 写法：虚拟目录+Servlet的资源路径

    注： BeanUtils工具类(用于封装JavaBean的)，简化数据封装
        1. JavaBean：标准的Java类
            1. 要求：
                1. 类必须被public修饰
                2. 必须提供空参的构造器
                3. 成员变量必须使用private修饰
                4. 提供公共setter和getter方法
            2. 功能：封装数据

        2. 方法：
            1. void BeanUtils.setProperty(Object bean, String name, Object value):
               其中bean是指你将要设置的对象，name指的是将要设置的属性,，value是属性值
            2. String BeanUtils.getProperty(Object bean, String name)
            3. (*)void BeanUtils.populate(Object bean , Map map):
               将map集合的键值对信息，封装到对应的bean对象中
               其中Map中的key必须与目标对象中的属性名相同
            注：属性为get/set方法后面的值，如：getHehe,属性名就为hehe

# Response：
    响应消息：服务器端发送给客户端的数据
    * 数据格式：
        1. 响应行
            * 组成：协议/版本 响应状态码 状态码描述
            * 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态
                1. 状态码都是3位数字
                2. 分类：
                    1. 1xx：服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1xx状态码
                    2. 2xx：成功。代表：200
                    3. 3xx：重定向。代表：302(重定向)，304(访问缓存)
                    4. 4xx：客户端错误。
                        * 代表：
                            * 404：请求路径没有对应的资源
                            * 405：请求方式没有对应的doXxx方法
                    5. 5xx：服务器端错误。代表：500(服务器内部出现异常)

        2. 响应头：
            1. 格式：头名称： 值
            2. 常见的响应头：
                1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式
                2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据
                    * in-line:默认值,在当前页面内打开
                    * attachment;filename=xxx：以附件形式打开响应体,用于文件下载

        3. 响应空行
        4. 响应体:传输的数据

        * 响应消息例子
            //响应行
            HTTP/1.1 200 OK
            //响应头
            Content-Type: text/html;charset=UTF-8
            Content-Length: 101
            Date: Wed, 06 Jun 2018 07:08:42 GMT

            //响应体
            <html>
              <head>
                <title>$Title$</title>
              </head>
              <body>
              hello , response
              </body>
            </html>

# Response对象
    * 功能：设置响应消息
    1. 设置响应行
        1. 格式：HTTP/1.1 200 ok
        2. 设置状态码：setStatus(int sc)
    2. 设置响应头：setHeader(String name, String value)

    3. 设置响应体：
        * 使用步骤：
            1. 获取输出流
                * 字符输出流：PrintWriter getWriter()
                * 字节输出流：ServletOutputStream getOutputStream()
            2. 使用输出流，将数据输出到客户端浏览器

* 案例：
    1. 完成重定向
        * 重定向：资源跳转的方式
        * 代码实现：
            * 普通方法：
                //1. 设置状态码为302
                response.setStatus(302);
                //2.设置响应头location
                response.setHeader("location", "/project/responseDemo2");
            * 简单的重定向方法
                response.sendRedirect("/project/responseDemo2");

        * 重定向的特点:redirect
            1. 地址栏发生变化
            2. 重定向可以访问其他站点(服务器)的资源
            3. 重定向是两次请求,不能使用request对象来共享数据
        * 转发的特点:forward
            1. 转发地址栏路径不变
            2. 转发只能访问当前服务器下的资源
            3. 转发是一次请求，可以使用request对象来共享数据

        * 路径写法：
            1. 路径分类
                1. 相对路径：
                    * 找到当前资源和目标资源之间的相对位置关系
                2. 绝对路径：通过绝对路径可以确定唯一资源
                    * 如：http://localhost/project/demo,可以省略http://localhost, 即:/project/demo
                    * 判断定义的路径是给谁用的
                        * 给客户端浏览器使用：需要加虚拟目录(项目的访问路径),如：重定向，超链接
                            * 注：建议虚拟目录动态获取：request.getContextPath()
                        * 给服务器使用：不需要加虚拟目录，如:转发

    2. 服务器输出字符数据到浏览器
        * 步骤：
            1. 获取字符输出流
            2. 输出数据

        * 注意：
            * 乱码问题：
                response.getWriter();获取的流的默认编码是ISO-8859-1
            * 解决：在获取流之前设置编码
                response.setContentType("text/html;charset=utf-8");

    3. 服务器输出字节数据到浏览器
        * response.getOutputStream();

    4. 验证码
        1. 本质：图片
        2. 目的：防止恶意表单注册
    参考：regist模块


# ServletContext对象：
    1. 概念：代表整个web应用，可以和程序的容器(服务器)来通信
    2. 获取：
        1. 通过request对象获取
            request.getServletContext();
        2. 通过HttpServlet获取
            this.getServletContext();
    3. 功能：
        1. 获取MIME类型：
            * MIME类型:在互联网通信过程中定义的一种文件数据类型
                * 格式： 大类型/小类型，如：text/html、image/jpeg
            * 获取：String getMimeType(String file)

        2. 域对象：共享数据
            1. setAttribute(String name,Object value)
            2. getAttribute(String name)
            3. removeAttribute(String name)

            * ServletContext对象范围：所有用户所有请求的数据
        3. 获取文件的真实(服务器)路径
            方法：String getRealPath(String path)
                String a = context.getRealPath("/a.txt"); //web目录下资源访问
                String b = context.getRealPath("/WEB-INF/b.txt"); //WEB-INF目录下的资源访问
                String c = context.getRealPath("/WEB-INF/classes/c.txt"); //src目录下的资源访问

   参考：download模块
    * 文件下载需求：
        1. 页面显示超链接
        2. 点击超链接后弹出下载提示框
        3. 完成文件下载

    * 步骤：
        1. 定义页面，编辑超链接href属性，指向DownloadServlet，传递资源名称filename
        2. 定义DownloadServlet
            1. 获取文件服务器路径
            2. 指定response的响应头：content-disposition: attachment;filename=xxx
            3. 使用字节输入流加载文件进内存
            4. 将数据写出到response输出流

    * 问题：
        * 弹框中文文件名显示问题
            * 解决思路：
                1. 获取客户端使用的浏览器版本信息
                2. 根据不同的版本信息，设置filename的编码方式不同