# Filter：过滤器
	1. 概念：
		* 生活中的过滤器：净水器
		* web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能
		* 过滤器的作用：
			* 一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤...

	2. 快速入门：
        * 定义一个类，实现接口Filter
        * 复写方法
        * 配置拦截路径
            1. web.xml
                <filter>
                        <filter-name>demo</filter-name>
                        <!-- 包名+类名 -->
                        <filter-class>filter.FilterDemo</filter-class>
                </filter>

                <filter-mapping>
                        <filter-name>demo</filter-name>
                        <!-- 拦截路径 -->
                        <url-pattern>/*</url-pattern>
                </filter-mapping>
            2. 注解
                //访问所有资源之前，都会执行该过滤器
                @WebFilter("/*")
                public class FilterDemo implements Filter {
                    @Override
                    public void init(FilterConfig filterConfig) throws ServletException {

                    }
                    @Override
                    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
                        filterChain.doFilter(servletRequest,servletResponse); //放行
                    }
                    @Override
                    public void destroy() {

                    }
                }

	3. 过滤器细节：
		1. 过滤器执行流程
            1. 执行过滤器
            2. 执行放行后的资源
            3. 回来执行过滤器放行代码下边的代码

		2. 过滤器生命周期方法
			1. init:在服务器启动后，会创建Filter对象，然后调用init方法加载资源，只执行一次
			2. doFilter:每一次请求被拦截资源时，都会执行
			3. destroy:在服务器正常关闭时执行，销毁Filter对象，只执行一次

		3. 过滤器配置详解
			* 拦截路径配置：
				1. 具体资源路径: /index.jsp  只有访问index.jsp资源时，过滤器才会被执行
				2. 拦截目录:     /user/*	    访问/user下的所有资源时，过滤器都会被执行
				3. 后缀名拦截:   *.jsp		访问所有后缀名为jsp资源时，过滤器都会被执行
				4. 拦截所有资源:  /*		    访问所有资源时，过滤器都会被执行

			* 拦截方式配置：资源被访问的方式
				1. 注解配置：
					* 设置dispatcherTypes属性
						1. REQUEST：默认值。浏览器直接请求资源
						2. FORWARD：转发访问资源
						3. INCLUDE：包含访问资源
						4. ERROR：错误跳转资源
						5. ASYNC：异步访问资源
					如：
					@WebFilter(value="/*", dispatcherTypes="DispatcherType.FORWARD")
				2. web.xml配置
					* 设置<dispatcher></dispatcher>标签即可，例如：
					<filter-mapping>
                            <filter-name> demo </filter-name>
                            <url-pattern> /* </url-pattern>
                            <dispatcher> REQUEST </dispatcher>
                    </filter-mapping>

		4. 过滤器链
			* 执行顺序：后执行的先返回(例如：ABBA)

			* 过滤器先后顺序问题：
				1. 注解配置：按照类名的字符串比较规则比较，值小的先执行
				2. web.xml配置：先定义<filter-mapping>的先执行

	4. 案例：
	    完善case模块：
	        如果没有登陆直接访问则跳转登陆界面


# Listener：监听器
    1. 事件监听机制
        类似于js中的事件监听。当事件源上发生某个事件后，执行监听器代码。

	2. ServletContextListener:监听ServletContext对象的创建和销毁
		* 方法：
		    * void contextInitialized(ServletContextEvent sce)：ServletContext对象创建后执行
			* void contextDestroyed(ServletContextEvent sce)：ServletContext对象被销毁前执行

		* 步骤：
			1. 定义一个类，实现ServletContextListener接口
			2. 复写方法
			3. 配置
				1. web.xml：
                <listener>
                    <listener-class>listener.ContextLoaderListener</listener-class>
                </listener>

                <!-- 指定初始化参数 -->
                <context-param>
                   <param-name>contextConfigLocation</param-name>
                   <param-value>/WEB-INF/classes/contextConfig.xml</param-value>
                </context-param>
				2. 注解： @WebListener

    例：
    @WebListener
    public class ContextLoaderListener implements ServletContextListener {

        @Override
        public void contextInitialized(ServletContextEvent servletContextEvent) {
            //加载资源文件
            //1.获取ServletContext对象
            ServletContext servletContext = servletContextEvent.getServletContext();

            //2.获取初始化参数
            String contextConfigLocation = servletContext.getInitParameter("contextConfigLocation");

            //3.获取资源文件的真实路径
            String realPath = servletContext.getRealPath(contextConfigLocation);

            //4.读取资源文件
            try{
                FileInputStream fis = new FileInputStream(realPath);
                System.out.println(fis);
                fis.close();
            } catch (Exception e){
                e.printStackTrace();
            }
        }

        @Override
        public void contextDestroyed(ServletContextEvent servletContextEvent) {

        }

    }

